plugins {
    id 'java'
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT'
    id 'maven-publish'
}

archivesBaseName = "${mod_id}-common"

minecraft {
    version(minecraft_version)
    runs {   
        if (project.hasProperty('common_runs_enabled') ? project.findProperty('common_runs_enabled').toBoolean() : true) {
            server(project.hasProperty('common_server_run_name') ? project.findProperty('common_server_run_name') : 'vanilla_server') {
                workingDirectory(this.file("run"))
            }
            client(project.hasProperty('common_client_run_name') ? project.findProperty('common_client_run_name') : 'vanilla_client') {
                workingDirectory(this.file("run"))
            }
        }
    }
    //Apply the access widener of the Fabric project to the common source, so field/method access works like intended
    accessWideners(file("../Fabric/src/main/resources/fancymenu.accessWidener"))
}

dependencies {

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:0.2.0-beta.6"))

    compileOnly group:'org.spongepowered', name:'mixin', version:'0.8.5'

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    implementation group: 'org.ow2.asm', name: 'asm-tree', version: '9.3'

    implementation fileTree('libs') { include '*.jar' }

}

processResources {

    def buildProps = project.properties.clone()

    filesMatching(['pack.mcmeta']) {
        expand buildProps
    }

}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}